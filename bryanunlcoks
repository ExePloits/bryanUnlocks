local player = game.Players.LocalPlayer

-- Load the Orion library
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Orion/main/source'))()

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "Custom Dinosaur Spawner",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionDinosaurConfig"
})

-- Create the main tab
local DinosaurSpawnTab = Window:MakeTab({
    Name = "Dinosaur Spawner",
    Icon = "rbxassetid://4483362458"
})

-- Function to remove Triceratops from memory card and dinosaur folders
local function removeTriceratops()
    local memoryCard = player:FindFirstChild("MemoryCard")
    if memoryCard then
        -- Remove Triceratops token from Tokens folder
        local tokens = memoryCard:FindFirstChild("Tokens")
        if tokens then
            local triceratopsToken = tokens:FindFirstChild("Triceratops")
            if triceratopsToken then
                triceratopsToken:Destroy()
                print("Removed Triceratops token from Tokens folder")
            end
        end

        -- Remove Triceratops from Dinosaurs folder
        local dinosaurs = memoryCard:FindFirstChild("Dinosaurs")
        if dinosaurs then
            local triceratopsDinosaur = dinosaurs:FindFirstChild("Triceratops")
            if triceratopsDinosaur then
                triceratopsDinosaur:Destroy()
                print("Removed Triceratops from Dinosaurs folder")
            end
        end
    end
end

-- Function to simulate ownership and move dinosaur folder
local function simulateOwnershipAndMoveDinoFolder(dinoName)
    local memoryCard = player:FindFirstChild("MemoryCard")
    if not memoryCard then
        memoryCard = Instance.new("Folder")
        memoryCard.Name = "MemoryCard"
        memoryCard.Parent = player
        print("Created new MemoryCard folder")
    end

    local tokens = memoryCard:FindFirstChild("Tokens")
    if not tokens then
        tokens = Instance.new("Folder")
        tokens.Name = "Tokens"
        tokens.Parent = memoryCard
        print("Created new Tokens folder")
    end

    local dinoToken = tokens:FindFirstChild(dinoName)
    if not dinoToken then
        dinoToken = Instance.new("IntValue")
        dinoToken.Name = dinoName
        dinoToken.Value = 1
        dinoToken.Parent = tokens
        print("Simulated token ownership of dinosaur:", dinoName)
    else
        dinoToken.Value = dinoToken.Value + 1
        print("Incremented dinosaur token count for:", dinoName)
    end

    -- Move dinosaur folder from ReplicatedStorage to MemoryCard->Dinosaurs
    local replicatedStorage = game:GetService("ReplicatedStorage")
    local databaseFolder = replicatedStorage:FindFirstChild("Database")
    if databaseFolder then
        local dinosaursFolder = databaseFolder:FindFirstChild("Dinosaurs")
        if dinosaursFolder then
            local dinoFolder = dinosaursFolder:FindFirstChild(dinoName)
            if dinoFolder then
                local memoryCardDinosaursFolder = memoryCard:FindFirstChild("Dinosaurs")
                if not memoryCardDinosaursFolder then
                    memoryCardDinosaursFolder = Instance.new("Folder")
                    memoryCardDinosaursFolder.Name = "Dinosaurs"
                    memoryCardDinosaursFolder.Parent = memoryCard
                    print("Created new Dinosaurs folder in MemoryCard")
                end

                if not memoryCardDinosaursFolder:FindFirstChild(dinoName) then
                    local clonedDinoFolder = dinoFolder:Clone()
                    clonedDinoFolder.Parent = memoryCardDinosaursFolder
                    print("Moved dinosaur folder to MemoryCard->Dinosaurs:", dinoName)
                else
                    print("Dinosaur folder already exists in MemoryCard->Dinosaurs:", dinoName)
                end
            else
                warn("Dinosaur folder not found in ReplicatedStorage:", dinoName)
            end
        else
            warn("Dinosaurs folder not found in Database")
        end
    else
        warn("Database folder not found in ReplicatedStorage")
    end
end

-- Function to modify CharStorage
local function ensureCharStorage(dinoName)
    local charStorage = workspace:FindFirstChild("CharStorage")
    if charStorage then
        if not charStorage:FindFirstChild(dinoName) then
            local replicatedStorage = game:GetService("ReplicatedStorage")
            local databaseFolder = replicatedStorage:FindFirstChild("Database")
            if databaseFolder then
                local dinosaursFolder = databaseFolder:FindFirstChild("Dinosaurs")
                if dinosaursFolder then
                    local dino = dinosaursFolder:FindFirstChild(dinoName)
                    if dino then
                        local clonedDino = dino:Clone()
                        clonedDino.Parent = charStorage
                        print("Added dinosaur to CharStorage:", dinoName)
                    else
                        warn("Dinosaur not found in ReplicatedStorage:", dinoName)
                    end
                else
                    warn("Dinosaurs folder not found in Database")
                end
            else
                warn("Database folder not found in ReplicatedStorage")
            end
        else
            print("Dinosaur already exists in CharStorage:", dinoName)
        end
    else
        warn("CharStorage not found in workspace")
    end
end

-- Function to force the dinosaur spawn using ChangeDinosaur event
local function forceDinosaurSpawn(dinoName)
    local success, err = pcall(function()
        print("Attempting to force spawn dinosaur:", dinoName)
        simulateOwnershipAndMoveDinoFolder(dinoName)
        ensureCharStorage(dinoName)

        -- Force spawn the desired dinosaur
        local a = dinoName
        local targ = dinoName
        workspace.GameEvents.ChangeDinosaur:FireServer(a)
        wait(2)
        workspace.GameEvents.StartPlayer:FireServer()
        wait(1)
        workspace.GameEvents.ChangeDinosaur:FireServer(targ)
        wait(0.5)
        workspace.GameEvents.ChangeDinosaur:FireServer(targ)
        print("Forced spawn of dinosaur:", dinoName)
    end)

    if not success then
        warn("Error occurred while forcing dinosaur spawn: " .. err)
    end
end

-- Text input to enter dinosaur name
local dinosaurNameInput

DinosaurSpawnTab:AddTextbox({
    Name = "Dinosaur Name",
    Default = "",
    TextDisappear = true,
    Callback = function(value)
        dinosaurNameInput = value
        print("Entered dinosaur name:", value)
    end
})

-- Button to spawn dinosaur based on input
DinosaurSpawnTab:AddButton({
    Name = "Force Spawn Dinosaur",
    Callback = function()
        if dinosaurNameInput and dinosaurNameInput ~= "" then
            removeTriceratops()
            forceDinosaurSpawn(dinosaurNameInput)
        else
            print("Please enter a dinosaur name.")
        end
    end
})

-- Create buttons for each dinosaur in the folder
local databaseFolder = game:GetService("ReplicatedStorage"):FindFirstChild("Database")
if databaseFolder then
    local dinosaursFolder = databaseFolder:FindFirstChild("Dinosaurs")
    if dinosaursFolder then
        for _, dino in ipairs(dinosaursFolder:GetChildren()) do
            DinosaurSpawnTab:AddButton({
                Name = dino.Name,
                Callback = function()
                    print("Button clicked for dinosaur:", dino.Name)
                    removeTriceratops()
                    forceDinosaurSpawn(dino.Name)
                end
            })
        end
    else
        warn("Dinosaurs folder not found in Database")
    end
else
    warn("Database folder not found in ReplicatedStorage")
end

-- Initialize Orion
OrionLib:Init()
